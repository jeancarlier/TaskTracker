{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeanc\\\\Documents\\\\Desenvolvimento\\\\Testes\\\\TaskTracker\\\\tasktracker\\\\src\\\\context\\\\task\\\\TaskState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport TaskContext from './taskContext';\nimport TaskReducer from './taskReducer';\nimport data from \"../../data.json\";\nimport { GET_TASKS, SET_LOADING, ADD_TASK, DELETE_TASK, CONCLUDE_TASK } from '../types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskState = props => {\n  _s();\n\n  const initialState = {\n    tasks: [],\n    newTask: {\n      id: null,\n      name: '',\n      description: '',\n      startDate: null,\n      estimate: 0,\n      endDate: null\n    },\n    loading: false\n  };\n  const [state, dispatch] = useReducer(TaskReducer, initialState); //Get tasks\n\n  const getTasks = () => {\n    setLoading(); //Here we can call axios getting from server REST API. I'm using local data just to present \n\n    const tasks = data;\n    dispatch({\n      type: GET_TASKS,\n      payload: tasks\n    });\n  }; //Get Task status\n\n\n  const getStatus = function (record) {\n    if (record.endDate != null) {\n      return {\n        value: 'Completed',\n        colorClass: 'bg-green'\n      };\n    }\n\n    if (record.startDate == null) {\n      return {\n        value: 'Planned',\n        colorClass: 'bg-red'\n      };\n    }\n\n    return {\n      value: 'In Process',\n      colorClass: 'bg-yellow'\n    };\n  }; //Add task\n\n\n  const addTask = () => {\n    setLoading();\n\n    if (state.tasks && state.newTask !== {}) {\n      state.newTask.id = state.tasks.length + 1;\n      state.tasks = state.tasks.concat(state.newTask);\n    }\n\n    dispatch({\n      type: ADD_TASK,\n      payload: state.tasks\n    });\n  }; //Check form validity\n\n\n  const checkFormValidity = () => {\n    if (state.newTask.name == '' || state.newTask.description == '' || state.newTask.estimate == 0) {\n      var myform = document.getElementById(\"addTaskForm\")[0];\n\n      if (!myform.checkValidity()) {\n        if (myform.reportValidity) {\n          myform.reportValidity();\n        }\n      }\n\n      let inputComponent = document.getElementById('taskName');\n\n      if (state.newTask.name == '') {\n        inputComponent.classList.add('is-invalid');\n      } else {\n        inputComponent.classList.remove('is-invalid');\n      }\n\n      inputComponent = document.getElementById('taskDescription');\n\n      if (state.newTask.description == '') {\n        inputComponent.classList.add('is-invalid');\n      } else {\n        inputComponent.classList.remove('is-invalid');\n      }\n\n      inputComponent = document.getElementById('taskEstimate');\n\n      if (state.newTask.estimate == 0) {\n        inputComponent.classList.add('is-invalid');\n      } else {\n        inputComponent.classList.remove('is-invalid');\n      }\n\n      return false;\n    }\n\n    let inputComponent = document.getElementById('taskName');\n    inputComponent.classList.remove('is-invalid');\n    inputComponent = document.getElementById('taskDescription');\n    inputComponent.classList.remove('is-invalid');\n    inputComponent = document.getElementById('taskEstimate');\n    inputComponent.classList.remove('is-invalid');\n    return true;\n  }; //Delete task\n\n\n  const deleteTask = index => {\n    setLoading();\n\n    if (state.tasks) {\n      state.tasks = state.tasks.filter(t => t.id !== index);\n    }\n\n    dispatch({\n      type: DELETE_TASK,\n      payload: state.tasks\n    });\n  }; //Conclude task\n\n\n  const concludeTask = index => {\n    setLoading();\n\n    if (state.tasks) {\n      const ind = state.tasks.findIndex(t => t.id === index);\n      state.tasks[ind].endDate = new Date();\n    }\n\n    dispatch({\n      type: CONCLUDE_TASK,\n      payload: state.tasks\n    });\n  }; //Conclude task\n\n\n  const startTask = index => {\n    setLoading();\n    console.log('Index: ' + index);\n    console.log(state.tasks);\n\n    if (state.tasks) {\n      const ind = state.tasks.findIndex(t => t.id === index);\n      state.tasks[ind].startDate = new Date();\n    }\n\n    console.log(state.tasks);\n    dispatch({\n      type: CONCLUDE_TASK,\n      payload: state.tasks\n    });\n  }; //Set loading\n\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  });\n\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks: state.tasks,\n      newTask: state.newTask,\n      loading: state.loading,\n      getTasks,\n      getStatus,\n      deleteTask,\n      concludeTask,\n      addTask,\n      startTask,\n      checkFormValidity\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 10\n  }, this);\n};\n\n_s(TaskState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = TaskState;\nexport default TaskState;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskState\");","map":{"version":3,"sources":["C:/Users/jeanc/Documents/Desenvolvimento/Testes/TaskTracker/tasktracker/src/context/task/TaskState.js"],"names":["React","useReducer","TaskContext","TaskReducer","data","GET_TASKS","SET_LOADING","ADD_TASK","DELETE_TASK","CONCLUDE_TASK","TaskState","props","initialState","tasks","newTask","id","name","description","startDate","estimate","endDate","loading","state","dispatch","getTasks","setLoading","type","payload","getStatus","record","value","colorClass","addTask","length","concat","checkFormValidity","myform","document","getElementById","checkValidity","reportValidity","inputComponent","classList","add","remove","deleteTask","index","filter","t","concludeTask","ind","findIndex","Date","startTask","console","log","children"],"mappings":"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","sourcesContent":["import React, {useReducer} from 'react';\r\nimport TaskContext from './taskContext';\r\nimport TaskReducer from './taskReducer';\r\nimport data from \"../../data.json\";\r\n\r\nimport {\r\n  GET_TASKS,\r\n  SET_LOADING,\r\n  ADD_TASK,\r\n  DELETE_TASK,\r\n  CONCLUDE_TASK\r\n} from '../types';\r\n\r\nconst TaskState = props => {\r\n  const initialState = {\r\n    tasks: [],\r\n    newTask: {\r\n      id: null,\r\n      name: '',\r\n      description: '',\r\n      startDate: null,\r\n      estimate: 0,\r\n      endDate: null\r\n    },\r\n    loading: false\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(TaskReducer, initialState);\r\n\r\n  //Get tasks\r\n  const getTasks = () => {\r\n    setLoading();\r\n\r\n    //Here we can call axios getting from server REST API. I'm using local data just to present \r\n    const tasks = data;\r\n\r\n    dispatch({\r\n      type: GET_TASKS,\r\n      payload: tasks\r\n    });\r\n  }\r\n\r\n  //Get Task status\r\n  const getStatus = function(record){\r\n\r\n    if (record.endDate != null){\r\n      return {value: 'Completed', colorClass: 'bg-green'};\r\n    }\r\n  \r\n    if (record.startDate == null){\r\n      return {value: 'Planned', colorClass: 'bg-red'};\r\n    }\r\n  \r\n    return {value: 'In Process', colorClass: 'bg-yellow'};\r\n  \r\n  };\r\n\r\n  //Add task\r\n  const addTask = () => {\r\n    setLoading();        \r\n    \r\n    if (state.tasks && state.newTask !== {}) {\r\n      state.newTask.id = state.tasks.length + 1;\r\n      state.tasks = state.tasks.concat(state.newTask);\r\n    }\r\n    \r\n    dispatch({\r\n      type: ADD_TASK,\r\n      payload: state.tasks\r\n    })\r\n\r\n  }\r\n\r\n  //Check form validity\r\n  const checkFormValidity = () => {\r\n    if (state.newTask.name == '' || state.newTask.description == '' || state.newTask.estimate == 0){      \r\n      var myform = document.getElementById(\"addTaskForm\")[0];\r\n      if (!myform.checkValidity()) {\r\n          if (myform.reportValidity) {\r\n              myform.reportValidity();              \r\n          }\r\n      }\r\n      let inputComponent = document.getElementById('taskName');\r\n      if(state.newTask.name == ''){        \r\n        inputComponent.classList.add('is-invalid');\r\n      }else{\r\n        inputComponent.classList.remove('is-invalid');\r\n      }\r\n\r\n      inputComponent = document.getElementById('taskDescription');\r\n      if(state.newTask.description == ''){      \r\n        inputComponent.classList.add('is-invalid');\r\n      }else{\r\n        inputComponent.classList.remove('is-invalid');\r\n      }\r\n\r\n      inputComponent = document.getElementById('taskEstimate');\r\n      if(state.newTask.estimate == 0){        \r\n        inputComponent.classList.add('is-invalid');\r\n      }else{\r\n        inputComponent.classList.remove('is-invalid');\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    let inputComponent = document.getElementById('taskName');\r\n    inputComponent.classList.remove('is-invalid');\r\n    \r\n    inputComponent = document.getElementById('taskDescription');\r\n    inputComponent.classList.remove('is-invalid');\r\n    \r\n    inputComponent = document.getElementById('taskEstimate');\r\n    inputComponent.classList.remove('is-invalid');\r\n    \r\n    return true;\r\n  }\r\n\r\n  //Delete task\r\n  const deleteTask = (index) => {\r\n    setLoading();\r\n\r\n    if (state.tasks) {\r\n      state.tasks = state.tasks.filter(t => t.id !== index );\r\n    }\r\n\r\n    dispatch({\r\n      type: DELETE_TASK,\r\n      payload: state.tasks\r\n    })\r\n\r\n  }\r\n\r\n  //Conclude task\r\n  const concludeTask = (index) => {\r\n    setLoading();\r\n    \r\n    if (state.tasks) {\r\n      const ind = state.tasks.findIndex(t => t.id === index );\r\n      state.tasks[ind].endDate = new Date();\r\n    }\r\n    \r\n    dispatch({\r\n      type: CONCLUDE_TASK,\r\n      payload: state.tasks\r\n    })\r\n\r\n  }\r\n\r\n  //Conclude task\r\n  const startTask = (index) => {\r\n    setLoading();\r\n    \r\n    console.log('Index: '+ index);\r\n    console.log (state.tasks);\r\n\r\n    if (state.tasks) {\r\n      const ind = state.tasks.findIndex(t => t.id === index );\r\n      state.tasks[ind].startDate = new Date();\r\n    }\r\n    \r\n    console.log (state.tasks);\r\n\r\n    dispatch({\r\n      type: CONCLUDE_TASK,\r\n      payload: state.tasks\r\n    })\r\n\r\n  }\r\n\r\n\r\n  //Set loading\r\n  const setLoading = () => dispatch({type: SET_LOADING});\r\n\r\n  return <TaskContext.Provider\r\n    value={{\r\n      tasks: state.tasks,\r\n      newTask: state.newTask,\r\n      loading: state.loading,\r\n      getTasks,\r\n      getStatus,\r\n      deleteTask,\r\n      concludeTask,\r\n      addTask,\r\n      startTask,\r\n      checkFormValidity\r\n    }}\r\n  >\r\n    {props.children}\r\n  </TaskContext.Provider>\r\n\r\n};\r\n\r\nexport default TaskState;\r\n\r\n"]},"metadata":{},"sourceType":"module"}