{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeanc\\\\Documents\\\\Desenvolvimento\\\\Testes\\\\TaskTracker\\\\tasktracker\\\\src\\\\context\\\\task\\\\TaskState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport TaskContext from './taskContext';\nimport TaskReducer from './taskReducer';\nimport data from \"../../data.json\";\nimport { GET_TASKS, SET_LOADING, ADD_TASK, DELETE_TASK, CONCLUDE_TASK } from '../types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskState = props => {\n  _s();\n\n  const initialState = {\n    tasks: [],\n    newTask: {\n      name: ''\n    },\n    loading: false\n  };\n  const [state, dispatch] = useReducer(TaskReducer, initialState); //Get tasks\n\n  const getTasks = () => {\n    setLoading(); //Here we can call axios getting from server REST API. I'm using local data just to present \n\n    const tasks = data;\n    dispatch({\n      type: GET_TASKS,\n      payload: tasks\n    });\n  }; //Get Task status\n\n\n  const getStatus = function (record) {\n    if (record.endDate != null) {\n      return {\n        value: 'Completed',\n        colorClass: 'bg-green'\n      };\n    }\n\n    if (record.startDate == null) {\n      return {\n        value: 'Planned',\n        colorClass: 'bg-red'\n      };\n    }\n\n    return {\n      value: 'In Process',\n      colorClass: 'bg-yellow'\n    };\n  }; //Add task\n\n\n  const addTask = () => {\n    setLoading();\n    console.log('Adding new task: ' + state.newTask);\n\n    if (state.tasks && state.newTask !== {}) {\n      state.tasks = state.tasks.concat(state.newTask);\n    }\n\n    dispatch({\n      type: ADD_TASK,\n      payload: state.tasks\n    });\n  }; //Delete task\n\n\n  const deleteTask = index => {\n    setLoading();\n\n    if (state.tasks) {\n      state.tasks = state.tasks.filter(t => t.id !== index);\n    }\n\n    dispatch({\n      type: DELETE_TASK,\n      payload: state.tasks\n    });\n  }; //Conclude task\n\n\n  const concludeTask = index => {\n    setLoading();\n\n    if (state.tasks) {\n      const ind = state.tasks.findIndex(t => t.id === index);\n      state.tasks[ind].endDate = new Date();\n    }\n\n    dispatch({\n      type: CONCLUDE_TASK,\n      payload: state.tasks\n    });\n  }; //Conclude task\n\n\n  const startTask = index => {\n    setLoading();\n    console.log('Index: ' + index);\n    console.log(state.tasks);\n\n    if (state.tasks) {\n      const ind = state.tasks.findIndex(t => t.id === index);\n      state.tasks[ind].startDate = new Date();\n    }\n\n    console.log(state.tasks);\n    dispatch({\n      type: CONCLUDE_TASK,\n      payload: state.tasks\n    });\n  }; //Set loading\n\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  });\n\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks: state.tasks,\n      newTask: state.newTask,\n      loading: state.loading,\n      getTasks,\n      getStatus,\n      deleteTask,\n      concludeTask,\n      addTask,\n      startTask\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 10\n  }, this);\n};\n\n_s(TaskState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = TaskState;\nexport default TaskState;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskState\");","map":{"version":3,"sources":["C:/Users/jeanc/Documents/Desenvolvimento/Testes/TaskTracker/tasktracker/src/context/task/TaskState.js"],"names":["React","useReducer","TaskContext","TaskReducer","data","GET_TASKS","SET_LOADING","ADD_TASK","DELETE_TASK","CONCLUDE_TASK","TaskState","props","initialState","tasks","newTask","name","loading","state","dispatch","getTasks","setLoading","type","payload","getStatus","record","endDate","value","colorClass","startDate","addTask","console","log","concat","deleteTask","index","filter","t","id","concludeTask","ind","findIndex","Date","startTask","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AAEA,SACEC,SADF,EAEEC,WAFF,EAGEC,QAHF,EAIEC,WAJF,EAKEC,aALF,QAMO,UANP;;;AAQA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AAAA;;AACzB,QAAMC,YAAY,GAAG;AACnBC,IAAAA,KAAK,EAAE,EADY;AAEnBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAE;AADC,KAFU;AAKnBC,IAAAA,OAAO,EAAE;AALU,GAArB;AAQA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjB,UAAU,CAACE,WAAD,EAAcS,YAAd,CAApC,CATyB,CAWzB;;AACA,QAAMO,QAAQ,GAAG,MAAM;AACrBC,IAAAA,UAAU,GADW,CAGrB;;AACA,UAAMP,KAAK,GAAGT,IAAd;AAEAc,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEhB,SADC;AAEPiB,MAAAA,OAAO,EAAET;AAFF,KAAD,CAAR;AAID,GAVD,CAZyB,CAwBzB;;;AACA,QAAMU,SAAS,GAAG,UAASC,MAAT,EAAgB;AAEhC,QAAIA,MAAM,CAACC,OAAP,IAAkB,IAAtB,EAA2B;AACzB,aAAO;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,UAAU,EAAE;AAAjC,OAAP;AACD;;AAED,QAAIH,MAAM,CAACI,SAAP,IAAoB,IAAxB,EAA6B;AAC3B,aAAO;AAACF,QAAAA,KAAK,EAAE,SAAR;AAAmBC,QAAAA,UAAU,EAAE;AAA/B,OAAP;AACD;;AAED,WAAO;AAACD,MAAAA,KAAK,EAAE,YAAR;AAAsBC,MAAAA,UAAU,EAAE;AAAlC,KAAP;AAED,GAZD,CAzByB,CAuCzB;;;AACA,QAAME,OAAO,GAAG,MAAM;AACpBT,IAAAA,UAAU;AACVU,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAoBd,KAAK,CAACH,OAAtC;;AACA,QAAIG,KAAK,CAACJ,KAAN,IAAeI,KAAK,CAACH,OAAN,KAAkB,EAArC,EAAyC;AACvCG,MAAAA,KAAK,CAACJ,KAAN,GAAcI,KAAK,CAACJ,KAAN,CAAYmB,MAAZ,CAAmBf,KAAK,CAACH,OAAzB,CAAd;AACD;;AAEDI,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEd,QADC;AAEPe,MAAAA,OAAO,EAAEL,KAAK,CAACJ;AAFR,KAAD,CAAR;AAKD,GAZD,CAxCyB,CAsDzB;;;AACA,QAAMoB,UAAU,GAAIC,KAAD,IAAW;AAC5Bd,IAAAA,UAAU;;AAEV,QAAIH,KAAK,CAACJ,KAAV,EAAiB;AACfI,MAAAA,KAAK,CAACJ,KAAN,GAAcI,KAAK,CAACJ,KAAN,CAAYsB,MAAZ,CAAmBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASH,KAAjC,CAAd;AACD;;AAEDhB,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEb,WADC;AAEPc,MAAAA,OAAO,EAAEL,KAAK,CAACJ;AAFR,KAAD,CAAR;AAKD,GAZD,CAvDyB,CAqEzB;;;AACA,QAAMyB,YAAY,GAAIJ,KAAD,IAAW;AAC9Bd,IAAAA,UAAU;;AAEV,QAAIH,KAAK,CAACJ,KAAV,EAAiB;AACf,YAAM0B,GAAG,GAAGtB,KAAK,CAACJ,KAAN,CAAY2B,SAAZ,CAAsBJ,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASH,KAApC,CAAZ;AACAjB,MAAAA,KAAK,CAACJ,KAAN,CAAY0B,GAAZ,EAAiBd,OAAjB,GAA2B,IAAIgB,IAAJ,EAA3B;AACD;;AAEDvB,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEZ,aADC;AAEPa,MAAAA,OAAO,EAAEL,KAAK,CAACJ;AAFR,KAAD,CAAR;AAKD,GAbD,CAtEyB,CAqFzB;;;AACA,QAAM6B,SAAS,GAAIR,KAAD,IAAW;AAC3Bd,IAAAA,UAAU;AAEVU,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAWG,KAAvB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAad,KAAK,CAACJ,KAAnB;;AAEA,QAAII,KAAK,CAACJ,KAAV,EAAiB;AACf,YAAM0B,GAAG,GAAGtB,KAAK,CAACJ,KAAN,CAAY2B,SAAZ,CAAsBJ,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASH,KAApC,CAAZ;AACAjB,MAAAA,KAAK,CAACJ,KAAN,CAAY0B,GAAZ,EAAiBX,SAAjB,GAA6B,IAAIa,IAAJ,EAA7B;AACD;;AAEDX,IAAAA,OAAO,CAACC,GAAR,CAAad,KAAK,CAACJ,KAAnB;AAEAK,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEZ,aADC;AAEPa,MAAAA,OAAO,EAAEL,KAAK,CAACJ;AAFR,KAAD,CAAR;AAKD,GAlBD,CAtFyB,CA2GzB;;;AACA,QAAMO,UAAU,GAAG,MAAMF,QAAQ,CAAC;AAACG,IAAAA,IAAI,EAAEf;AAAP,GAAD,CAAjC;;AAEA,sBAAO,QAAC,WAAD,CAAa,QAAb;AACL,IAAA,KAAK,EAAE;AACLO,MAAAA,KAAK,EAAEI,KAAK,CAACJ,KADR;AAELC,MAAAA,OAAO,EAAEG,KAAK,CAACH,OAFV;AAGLE,MAAAA,OAAO,EAAEC,KAAK,CAACD,OAHV;AAILG,MAAAA,QAJK;AAKLI,MAAAA,SALK;AAMLU,MAAAA,UANK;AAOLK,MAAAA,YAPK;AAQLT,MAAAA,OARK;AASLa,MAAAA;AATK,KADF;AAAA,cAaJ/B,KAAK,CAACgC;AAbF;AAAA;AAAA;AAAA;AAAA,UAAP;AAgBD,CA9HD;;GAAMjC,S;;KAAAA,S;AAgIN,eAAeA,SAAf","sourcesContent":["import React, {useReducer} from 'react';\r\nimport TaskContext from './taskContext';\r\nimport TaskReducer from './taskReducer';\r\nimport data from \"../../data.json\";\r\n\r\nimport {\r\n  GET_TASKS,\r\n  SET_LOADING,\r\n  ADD_TASK,\r\n  DELETE_TASK,\r\n  CONCLUDE_TASK\r\n} from '../types';\r\n\r\nconst TaskState = props => {\r\n  const initialState = {\r\n    tasks: [],\r\n    newTask: {\r\n      name: ''\r\n    },\r\n    loading: false\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(TaskReducer, initialState);\r\n\r\n  //Get tasks\r\n  const getTasks = () => {\r\n    setLoading();\r\n\r\n    //Here we can call axios getting from server REST API. I'm using local data just to present \r\n    const tasks = data;\r\n\r\n    dispatch({\r\n      type: GET_TASKS,\r\n      payload: tasks\r\n    });\r\n  }\r\n\r\n  //Get Task status\r\n  const getStatus = function(record){\r\n\r\n    if (record.endDate != null){\r\n      return {value: 'Completed', colorClass: 'bg-green'};\r\n    }\r\n  \r\n    if (record.startDate == null){\r\n      return {value: 'Planned', colorClass: 'bg-red'};\r\n    }\r\n  \r\n    return {value: 'In Process', colorClass: 'bg-yellow'};\r\n  \r\n  };\r\n\r\n  //Add task\r\n  const addTask = () => {\r\n    setLoading();\r\n    console.log('Adding new task: '+state.newTask)\r\n    if (state.tasks && state.newTask !== {}) {\r\n      state.tasks = state.tasks.concat(state.newTask);\r\n    }\r\n\r\n    dispatch({\r\n      type: ADD_TASK,\r\n      payload: state.tasks\r\n    })\r\n\r\n  }\r\n\r\n  //Delete task\r\n  const deleteTask = (index) => {\r\n    setLoading();\r\n\r\n    if (state.tasks) {\r\n      state.tasks = state.tasks.filter(t => t.id !== index );\r\n    }\r\n\r\n    dispatch({\r\n      type: DELETE_TASK,\r\n      payload: state.tasks\r\n    })\r\n\r\n  }\r\n\r\n  //Conclude task\r\n  const concludeTask = (index) => {\r\n    setLoading();\r\n    \r\n    if (state.tasks) {\r\n      const ind = state.tasks.findIndex(t => t.id === index );\r\n      state.tasks[ind].endDate = new Date();\r\n    }\r\n    \r\n    dispatch({\r\n      type: CONCLUDE_TASK,\r\n      payload: state.tasks\r\n    })\r\n\r\n  }\r\n\r\n  //Conclude task\r\n  const startTask = (index) => {\r\n    setLoading();\r\n    \r\n    console.log('Index: '+ index);\r\n    console.log (state.tasks);\r\n\r\n    if (state.tasks) {\r\n      const ind = state.tasks.findIndex(t => t.id === index );\r\n      state.tasks[ind].startDate = new Date();\r\n    }\r\n    \r\n    console.log (state.tasks);\r\n\r\n    dispatch({\r\n      type: CONCLUDE_TASK,\r\n      payload: state.tasks\r\n    })\r\n\r\n  }\r\n\r\n\r\n  //Set loading\r\n  const setLoading = () => dispatch({type: SET_LOADING});\r\n\r\n  return <TaskContext.Provider\r\n    value={{\r\n      tasks: state.tasks,\r\n      newTask: state.newTask,\r\n      loading: state.loading,\r\n      getTasks,\r\n      getStatus,\r\n      deleteTask,\r\n      concludeTask,\r\n      addTask,\r\n      startTask\r\n    }}\r\n  >\r\n    {props.children}\r\n  </TaskContext.Provider>\r\n\r\n};\r\n\r\nexport default TaskState;\r\n\r\n"]},"metadata":{},"sourceType":"module"}