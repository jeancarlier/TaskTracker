{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeanc\\\\Documents\\\\Desenvolvimento\\\\Testes\\\\TaskTracker\\\\tasktracker\\\\src\\\\context\\\\task\\\\TaskState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport TaskContext from './taskContext';\nimport TaskReducer from './taskReducer';\nimport data from \"../../data.json\";\nimport { GET_TASKS, SET_LOADING, ADD_TASK, DELETE_TASK, CONCLUDE_TASK } from '../types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskState = props => {\n  _s();\n\n  const initialState = {\n    tasks: [],\n    newTask: {\n      name: '',\n      description: '',\n      estimate: 0\n    },\n    loading: false\n  };\n  const [state, dispatch] = useReducer(TaskReducer, initialState); //Get tasks\n\n  const getTasks = () => {\n    setLoading(); //Here we can call axios getting from server REST API. I'm using local data just to present \n\n    const tasks = data;\n    dispatch({\n      type: GET_TASKS,\n      payload: tasks\n    });\n  }; //Get Task status\n\n\n  const getStatus = function (record) {\n    if (record.endDate != null) {\n      return {\n        value: 'Completed',\n        colorClass: 'bg-green'\n      };\n    }\n\n    if (record.startDate == null) {\n      return {\n        value: 'Planned',\n        colorClass: 'bg-red'\n      };\n    }\n\n    return {\n      value: 'In Process',\n      colorClass: 'bg-yellow'\n    };\n  }; //Add task\n\n\n  const addTask = () => {\n    setLoading();\n    console.log('Adding new task: ' + state.newTask.name);\n    state.newTask.startDate = null;\n    state.newTask.endDate = null;\n    state.newTask.id = state.tasks.length;\n\n    if (state.tasks && state.newTask !== {}) {\n      state.tasks = state.tasks.concat(state.newTask);\n    }\n\n    console.log(state.tasks);\n    dispatch({\n      type: ADD_TASK,\n      payload: state.tasks\n    });\n  }; //Delete task\n\n\n  const deleteTask = index => {\n    setLoading();\n\n    if (state.tasks) {\n      state.tasks = state.tasks.filter(t => t.id !== index);\n    }\n\n    dispatch({\n      type: DELETE_TASK,\n      payload: state.tasks\n    });\n  }; //Conclude task\n\n\n  const concludeTask = index => {\n    setLoading();\n\n    if (state.tasks) {\n      const ind = state.tasks.findIndex(t => t.id === index);\n      state.tasks[ind].endDate = new Date();\n    }\n\n    dispatch({\n      type: CONCLUDE_TASK,\n      payload: state.tasks\n    });\n  }; //Conclude task\n\n\n  const startTask = index => {\n    setLoading();\n    console.log('Index: ' + index);\n    console.log(state.tasks);\n\n    if (state.tasks) {\n      const ind = state.tasks.findIndex(t => t.id === index);\n      state.tasks[ind].startDate = new Date();\n    }\n\n    console.log(state.tasks);\n    dispatch({\n      type: CONCLUDE_TASK,\n      payload: state.tasks\n    });\n  }; //Set loading\n\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  });\n\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks: state.tasks,\n      newTask: state.newTask,\n      loading: state.loading,\n      getTasks,\n      getStatus,\n      deleteTask,\n      concludeTask,\n      addTask,\n      startTask\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 10\n  }, this);\n};\n\n_s(TaskState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = TaskState;\nexport default TaskState;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskState\");","map":{"version":3,"sources":["C:/Users/jeanc/Documents/Desenvolvimento/Testes/TaskTracker/tasktracker/src/context/task/TaskState.js"],"names":["React","useReducer","TaskContext","TaskReducer","data","GET_TASKS","SET_LOADING","ADD_TASK","DELETE_TASK","CONCLUDE_TASK","TaskState","props","initialState","tasks","newTask","name","description","estimate","loading","state","dispatch","getTasks","setLoading","type","payload","getStatus","record","endDate","value","colorClass","startDate","addTask","console","log","id","length","concat","deleteTask","index","filter","t","concludeTask","ind","findIndex","Date","startTask","children"],"mappings":"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","sourcesContent":["import React, {useReducer} from 'react';\r\nimport TaskContext from './taskContext';\r\nimport TaskReducer from './taskReducer';\r\nimport data from \"../../data.json\";\r\n\r\nimport {\r\n  GET_TASKS,\r\n  SET_LOADING,\r\n  ADD_TASK,\r\n  DELETE_TASK,\r\n  CONCLUDE_TASK\r\n} from '../types';\r\n\r\nconst TaskState = props => {\r\n  const initialState = {\r\n    tasks: [],\r\n    newTask: {\r\n      name: '',\r\n      description: '',\r\n      estimate: 0\r\n    },\r\n    loading: false\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(TaskReducer, initialState);\r\n\r\n  //Get tasks\r\n  const getTasks = () => {\r\n    setLoading();\r\n\r\n    //Here we can call axios getting from server REST API. I'm using local data just to present \r\n    const tasks = data;\r\n\r\n    dispatch({\r\n      type: GET_TASKS,\r\n      payload: tasks\r\n    });\r\n  }\r\n\r\n  //Get Task status\r\n  const getStatus = function(record){\r\n\r\n    if (record.endDate != null){\r\n      return {value: 'Completed', colorClass: 'bg-green'};\r\n    }\r\n  \r\n    if (record.startDate == null){\r\n      return {value: 'Planned', colorClass: 'bg-red'};\r\n    }\r\n  \r\n    return {value: 'In Process', colorClass: 'bg-yellow'};\r\n  \r\n  };\r\n\r\n  //Add task\r\n  const addTask = () => {\r\n    setLoading();\r\n    console.log('Adding new task: '+state.newTask.name)\r\n    state.newTask.startDate = null;\r\n    state.newTask.endDate = null;\r\n    state.newTask.id = state.tasks.length;\r\n\r\n    if (state.tasks && state.newTask !== {}) {\r\n      state.tasks = state.tasks.concat(state.newTask);\r\n    }\r\n    console.log(state.tasks)\r\n    dispatch({\r\n      type: ADD_TASK,\r\n      payload: state.tasks\r\n    })\r\n\r\n  }\r\n\r\n  //Delete task\r\n  const deleteTask = (index) => {\r\n    setLoading();\r\n\r\n    if (state.tasks) {\r\n      state.tasks = state.tasks.filter(t => t.id !== index );\r\n    }\r\n\r\n    dispatch({\r\n      type: DELETE_TASK,\r\n      payload: state.tasks\r\n    })\r\n\r\n  }\r\n\r\n  //Conclude task\r\n  const concludeTask = (index) => {\r\n    setLoading();\r\n    \r\n    if (state.tasks) {\r\n      const ind = state.tasks.findIndex(t => t.id === index );\r\n      state.tasks[ind].endDate = new Date();\r\n    }\r\n    \r\n    dispatch({\r\n      type: CONCLUDE_TASK,\r\n      payload: state.tasks\r\n    })\r\n\r\n  }\r\n\r\n  //Conclude task\r\n  const startTask = (index) => {\r\n    setLoading();\r\n    \r\n    console.log('Index: '+ index);\r\n    console.log (state.tasks);\r\n\r\n    if (state.tasks) {\r\n      const ind = state.tasks.findIndex(t => t.id === index );\r\n      state.tasks[ind].startDate = new Date();\r\n    }\r\n    \r\n    console.log (state.tasks);\r\n\r\n    dispatch({\r\n      type: CONCLUDE_TASK,\r\n      payload: state.tasks\r\n    })\r\n\r\n  }\r\n\r\n\r\n  //Set loading\r\n  const setLoading = () => dispatch({type: SET_LOADING});\r\n\r\n  return <TaskContext.Provider\r\n    value={{\r\n      tasks: state.tasks,\r\n      newTask: state.newTask,\r\n      loading: state.loading,\r\n      getTasks,\r\n      getStatus,\r\n      deleteTask,\r\n      concludeTask,\r\n      addTask,\r\n      startTask\r\n    }}\r\n  >\r\n    {props.children}\r\n  </TaskContext.Provider>\r\n\r\n};\r\n\r\nexport default TaskState;\r\n\r\n"]},"metadata":{},"sourceType":"module"}