{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeanc\\\\Documents\\\\Desenvolvimento\\\\Testes\\\\TaskTracker\\\\tasktracker\\\\src\\\\context\\\\task\\\\TaskState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport TaskContext from './taskContext';\nimport TaskReducer from './taskReducer';\nimport data from \"../../data.json\";\nimport { GET_TASKS, SET_LOADING, ADD_TASK, DELETE_TASK, CONCLUDE_TASK } from '../types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskState = props => {\n  _s();\n\n  const initialState = {\n    tasks: [],\n    loading: false\n  };\n  const [state, dispatch] = useReducer(TaskReducer, initialState); //Get tasks\n\n  const getTasks = async text => {\n    setLoading(); //Here we can call axios getting from server REST API. I'm using local data just to present \n\n    const tasks = data;\n    dispatch({\n      type: getTasks,\n      payload: tasks\n    });\n  }; //Get Task status\n\n\n  const getStatus = function (record) {\n    if (record.endDate != null) {\n      return {\n        value: 'Completed',\n        colorClass: 'bg-green'\n      };\n    }\n\n    if (new Date(record.beginDate) > new Date()) {\n      return {\n        value: 'Planned',\n        colorClass: 'bg-red'\n      };\n    }\n\n    return {\n      value: 'In Process',\n      colorClass: 'bg-yellow'\n    };\n  }; //Add task\n  //Delete task\n  //Conclude task\n  //Set loading\n\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  });\n\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks: state.tasks,\n      loading: state.loading,\n      getTasks,\n      getStatus\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 10\n  }, this);\n};\n\n_s(TaskState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = TaskState;\nexport default TaskState;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskState\");","map":{"version":3,"sources":["C:/Users/jeanc/Documents/Desenvolvimento/Testes/TaskTracker/tasktracker/src/context/task/TaskState.js"],"names":["React","useReducer","TaskContext","TaskReducer","data","GET_TASKS","SET_LOADING","ADD_TASK","DELETE_TASK","CONCLUDE_TASK","TaskState","props","initialState","tasks","loading","state","dispatch","getTasks","text","setLoading","type","payload","getStatus","record","endDate","value","colorClass","Date","beginDate","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AAEA,SACEC,SADF,EAEEC,WAFF,EAGEC,QAHF,EAIEC,WAJF,EAKEC,aALF,QAMO,UANP;;;AAQA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AAAA;;AACzB,QAAMC,YAAY,GAAG;AACnBC,IAAAA,KAAK,EAAE,EADY;AAEnBC,IAAAA,OAAO,EAAE;AAFU,GAArB;AAKA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,UAAU,CAACE,WAAD,EAAcS,YAAd,CAApC,CANyB,CAQzB;;AACA,QAAMK,QAAQ,GAAG,MAAMC,IAAN,IAAc;AAC7BC,IAAAA,UAAU,GADmB,CAG7B;;AACA,UAAMN,KAAK,GAAGT,IAAd;AAEAY,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEH,QADC;AAEPI,MAAAA,OAAO,EAAER;AAFF,KAAD,CAAR;AAID,GAVD,CATyB,CAqBzB;;;AACA,QAAMS,SAAS,GAAG,UAASC,MAAT,EAAgB;AAEhC,QAAIA,MAAM,CAACC,OAAP,IAAkB,IAAtB,EAA2B;AACzB,aAAO;AAACC,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,UAAU,EAAE;AAAjC,OAAP;AACD;;AAED,QAAI,IAAIC,IAAJ,CAASJ,MAAM,CAACK,SAAhB,IAA6B,IAAID,IAAJ,EAAjC,EAA4C;AAC1C,aAAO;AAACF,QAAAA,KAAK,EAAE,SAAR;AAAmBC,QAAAA,UAAU,EAAE;AAA/B,OAAP;AACD;;AAED,WAAO;AAACD,MAAAA,KAAK,EAAE,YAAR;AAAsBC,MAAAA,UAAU,EAAE;AAAlC,KAAP;AAED,GAZD,CAtByB,CAoCzB;AAEA;AAEA;AAEA;;;AACA,QAAMP,UAAU,GAAG,MAAMH,QAAQ,CAAC;AAACI,IAAAA,IAAI,EAAEd;AAAP,GAAD,CAAjC;;AAEA,sBAAO,QAAC,WAAD,CAAa,QAAb;AACL,IAAA,KAAK,EAAE;AACLO,MAAAA,KAAK,EAAEE,KAAK,CAACF,KADR;AAELC,MAAAA,OAAO,EAAEC,KAAK,CAACD,OAFV;AAGLG,MAAAA,QAHK;AAILK,MAAAA;AAJK,KADF;AAAA,cAQJX,KAAK,CAACkB;AARF;AAAA;AAAA;AAAA;AAAA,UAAP;AAWD,CAxDD;;GAAMnB,S;;KAAAA,S;AA0DN,eAAeA,SAAf","sourcesContent":["import React, {useReducer} from 'react';\r\nimport TaskContext from './taskContext';\r\nimport TaskReducer from './taskReducer';\r\nimport data from \"../../data.json\";\r\n\r\nimport {\r\n  GET_TASKS,\r\n  SET_LOADING,\r\n  ADD_TASK,\r\n  DELETE_TASK,\r\n  CONCLUDE_TASK\r\n} from '../types';\r\n\r\nconst TaskState = props => {\r\n  const initialState = {\r\n    tasks: [],\r\n    loading: false\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(TaskReducer, initialState);\r\n\r\n  //Get tasks\r\n  const getTasks = async text => {\r\n    setLoading();\r\n\r\n    //Here we can call axios getting from server REST API. I'm using local data just to present \r\n    const tasks = data;\r\n\r\n    dispatch({\r\n      type: getTasks,\r\n      payload: tasks\r\n    });\r\n  }\r\n\r\n  //Get Task status\r\n  const getStatus = function(record){\r\n\r\n    if (record.endDate != null){\r\n      return {value: 'Completed', colorClass: 'bg-green'};\r\n    }\r\n  \r\n    if (new Date(record.beginDate) > new Date()){\r\n      return {value: 'Planned', colorClass: 'bg-red'};\r\n    }\r\n  \r\n    return {value: 'In Process', colorClass: 'bg-yellow'};\r\n  \r\n  };\r\n\r\n  //Add task\r\n\r\n  //Delete task\r\n\r\n  //Conclude task\r\n\r\n  //Set loading\r\n  const setLoading = () => dispatch({type: SET_LOADING});\r\n\r\n  return <TaskContext.Provider\r\n    value={{\r\n      tasks: state.tasks,\r\n      loading: state.loading,\r\n      getTasks,\r\n      getStatus\r\n    }}\r\n  >\r\n    {props.children}\r\n  </TaskContext.Provider>\r\n\r\n};\r\n\r\nexport default TaskState;\r\n\r\n"]},"metadata":{},"sourceType":"module"}