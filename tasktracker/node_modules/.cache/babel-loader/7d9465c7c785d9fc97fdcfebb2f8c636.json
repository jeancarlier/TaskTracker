{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeanc\\\\Documents\\\\Desenvolvimento\\\\Testes\\\\TaskTracker\\\\tasktracker\\\\src\\\\components\\\\tasks\\\\TaskCompleteButton.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport PropTypes from 'prop-types';\nimport img from '../../images/icons8-checked-64.png';\nimport ConfirmationDialog from \"../modals/ConfirmationDialog\";\nimport TaskContext from \"../../context/task/taskContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TaskCompleteButton = _ref => {\n  _s();\n\n  var _ref2;\n\n  let {\n    index,\n    status\n  } = _ref;\n  const taskContext = useContext(TaskContext);\n  const [showConfirmationDialog, setShowConfirmationDialog] = useState(false);\n\n  const showDialog = () => {\n    setShowConfirmationDialog(show => !show);\n  };\n\n  const {\n    concludeTask\n  } = taskContext;\n\n  const completeTask = () => {\n    concludeTask(index);\n    showDialog();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [(_ref2 = status == 'Completed') !== null && _ref2 !== void 0 ? _ref2 : /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"taskGridCommands\",\n      src: img,\n      value: index,\n      alt: \"\",\n      \"data-toggle\": \"tooltip\",\n      \"data-placement\": \"top\",\n      title: \"Complete task       clicking here\",\n      onClick: showDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmationDialog, {\n      showMessage: showConfirmationDialog,\n      title: \"Warning\",\n      message: \"Do you really want to set this task as completed?\",\n      positiveBtn: \"Yes\",\n      negativeBtn: \"No\",\n      positiveResponse: completeTask,\n      negativeResponse: showDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TaskCompleteButton, \"tAUKCemcaoI9xtBxPZfTuVLKKK0=\");\n\n_c = TaskCompleteButton;\nTaskCompleteButton.defaultProps = {\n  index: -1\n};\nTaskCompleteButton.propTypes = {\n  index: PropTypes.number.isRequired\n};\nexport default TaskCompleteButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskCompleteButton\");","map":{"version":3,"sources":["C:/Users/jeanc/Documents/Desenvolvimento/Testes/TaskTracker/tasktracker/src/components/tasks/TaskCompleteButton.jsx"],"names":["React","useState","useContext","PropTypes","img","ConfirmationDialog","TaskContext","TaskCompleteButton","index","status","taskContext","showConfirmationDialog","setShowConfirmationDialog","showDialog","show","concludeTask","completeTask","defaultProps","propTypes","number","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,QAA0C,OAA1C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,oCAAhB;AACA,OAAOC,kBAAP,MAA+B,8BAA/B;AACA,OAAOC,WAAP,MAAwB,gCAAxB;;;;AAEA,MAAMC,kBAAkB,GAAG,QAAqB;AAAA;;AAAA;;AAAA,MAApB;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAoB;AAC9C,QAAMC,WAAW,GAAGR,UAAU,CAACI,WAAD,CAA9B;AACA,QAAM,CAACK,sBAAD,EAAyBC,yBAAzB,IAAsDX,QAAQ,CAAC,KAAD,CAApE;;AAEA,QAAMY,UAAU,GAAG,MAAM;AACvBD,IAAAA,yBAAyB,CAACE,IAAI,IAAI,CAACA,IAAV,CAAzB;AACD,GAFD;;AAIA,QAAM;AAACC,IAAAA;AAAD,MAAiBL,WAAvB;;AAEA,QAAMM,YAAY,GAAG,MAAM;AACzBD,IAAAA,YAAY,CAACP,KAAD,CAAZ;AACAK,IAAAA,UAAU;AACX,GAHD;;AAKA,sBACE;AAAA,wBACIJ,MAAM,IAAI,WADd,sDAEI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAkC,MAAA,GAAG,EAAEL,GAAvC;AAA4C,MAAA,KAAK,EAAEI,KAAnD;AAA0D,MAAA,GAAG,EAAC,EAA9D;AACE,qBAAY,SADd;AACwB,wBAAe,KADvC;AAC6C,MAAA,KAAK,EAAC,mCADnD;AACuF,MAAA,OAAO,EAAEK;AADhG;AAAA;AAAA;AAAA;AAAA,YAFJ,eAME,QAAC,kBAAD;AAAoB,MAAA,WAAW,EAAEF,sBAAjC;AAAyD,MAAA,KAAK,EAAC,SAA/D;AAAyE,MAAA,OAAO,EAAC,mDAAjF;AAAqI,MAAA,WAAW,EAAC,KAAjJ;AAAuJ,MAAA,WAAW,EAAC,IAAnK;AAAwK,MAAA,gBAAgB,EAAEK,YAA1L;AAAwM,MAAA,gBAAgB,EAAEH;AAA1N;AAAA;AAAA;AAAA;AAAA,YANF;AAAA,kBADF;AAUD,CAzBD;;GAAMN,kB;;KAAAA,kB;AA2BNA,kBAAkB,CAACU,YAAnB,GAAkC;AAChCT,EAAAA,KAAK,EAAE,CAAC;AADwB,CAAlC;AAIAD,kBAAkB,CAACW,SAAnB,GAA+B;AAC7BV,EAAAA,KAAK,EAAEL,SAAS,CAACgB,MAAV,CAAiBC;AADK,CAA/B;AAIA,eAAeb,kBAAf","sourcesContent":["import React, {useState, useContext} from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport img from '../../images/icons8-checked-64.png';\r\nimport ConfirmationDialog from \"../modals/ConfirmationDialog\";\r\nimport TaskContext from \"../../context/task/taskContext\";\r\n\r\nconst TaskCompleteButton = ({index, status}) => {\r\n  const taskContext = useContext(TaskContext);\r\n  const [showConfirmationDialog, setShowConfirmationDialog] = useState(false);\r\n\r\n  const showDialog = () => {\r\n    setShowConfirmationDialog(show => !show);\r\n  }\r\n\r\n  const {concludeTask} = taskContext;\r\n\r\n  const completeTask = () => {\r\n    concludeTask(index);\r\n    showDialog();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      { status == 'Completed' ?? \r\n        <img className='taskGridCommands' src={img} value={index} alt='' \r\n          data-toggle=\"tooltip\" data-placement=\"top\" title=\"Complete task       clicking here\" onClick={showDialog}></img>    \r\n      }\r\n      \r\n      <ConfirmationDialog showMessage={showConfirmationDialog} title=\"Warning\" message=\"Do you really want to set this task as completed?\" positiveBtn='Yes' negativeBtn='No' positiveResponse={completeTask} negativeResponse={showDialog} />     \r\n    </>\r\n  );\r\n};\r\n\r\nTaskCompleteButton.defaultProps = {  \r\n  index: -1\r\n};\r\n\r\nTaskCompleteButton.propTypes = {  \r\n  index: PropTypes.number.isRequired\r\n}\r\n\r\nexport default TaskCompleteButton;"]},"metadata":{},"sourceType":"module"}